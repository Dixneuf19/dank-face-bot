# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

# Manually fixed
# import insult_jmk_pb2 as insult__jmk__pb2
from . import insult_jmk_pb2 as insult__jmk__pb2


class InsulterStub(object):
    """The greeting service definition.
  """

    def __init__(self, channel):
        """Constructor.

    Args:
      channel: A grpc.Channel.
    """
        self.GetInsult = channel.unary_unary(
            "/insultJMK.Insulter/GetInsult",
            request_serializer=insult__jmk__pb2.InsultRequest.SerializeToString,
            response_deserializer=insult__jmk__pb2.InsultResponse.FromString,
        )


class InsulterServicer(object):
    """The greeting service definition.
  """

    def GetInsult(self, request, context):
        """Sends a greeting
    """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_InsulterServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetInsult": grpc.unary_unary_rpc_method_handler(
            servicer.GetInsult,
            request_deserializer=insult__jmk__pb2.InsultRequest.FromString,
            response_serializer=insult__jmk__pb2.InsultResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "insultJMK.Insulter", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
